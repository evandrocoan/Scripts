Disable use of the git credential cache using 
git config --global --unset credential.helper

Save credential
git config --global credential.helper wincred

Credential Storage
If you use the SSH transport for connecting to remotes, it’s possible for you to 
have a key without a passphrase, which allows you to securely transfer data 
without typing in your username and password. However, this isn’t possible 
with the HTTP protocols – every connection needs a username and password. 
This gets even harder for systems with two-factor authentication, where the 
token you use for a password is randomly generated and unpronounceable.

Fortunately, Git has a credentials system that can help with this. Git has a few 
options provided in the box:

The default is not to cache at all. Every connection will prompt you for your 
username and password.

The “cache” mode keeps credentials in memory for a certain period of time. 
None of the passwords are ever stored on disk, and they are purged from the 
cache after 15 minutes.

The “store” mode saves the credentials to a plain-text file on disk, and they 
never expire. This means that until you change your password for the Git host, 
you won’t ever have to type in your credentials again. The downside of this 
approach is that your passwords are stored in cleartext in a plain file in your 
home directory.

If you’re using a Mac, Git comes with an “osxkeychain” mode, which caches 
credentials in the secure keychain that’s attached to your system account. 
This method stores the credentials on disk, and they never expire, but they’re 
encrypted with the same system that stores HTTPS certificates and Safari auto-fills.

If you’re using Windows, you can install a helper called “winstore.” 
This is similar to the “osxkeychain” helper described above, but uses the 
Windows Credential Store to control sensitive information. It can be 
found at https://gitcredentialstore.codeplex.com.

You can choose one of these methods by setting a Git configuration value:

$ git config --global credential.helper cache
Some of these helpers have options. The “store” helper can 
take a --file <path> argument, which customizes where the plaintext 
file is saved (the default is ~/.git-credentials). The “cache” helper accepts 
the --timeout <seconds> option, which changes the amount of time its
 daemon is kept running (the default is “900”, or 15 minutes). Here’s an 
 example of how you’d configure the “store” helper with a custom file name:

$ git config --global credential.helper store --file ~/.my-credentials
Git even allows you to configure several helpers. When looking for credentials 
for a particular host, Git will query them in order, and stop after the first answer 
is provided. When saving credentials, Git will send the username and password 
to all of the helpers in the list, and they can choose what to do with them. Here’s 
what a .gitconfig would look like if you had a credentials file on a thumb drive, 
but wanted to use the in-memory cache to save some typing if the drive isn’t plugged in:

[credential]
    helper = store --file /mnt/thumbdrive/.git-credentials
    helper = cache --timeout 30000